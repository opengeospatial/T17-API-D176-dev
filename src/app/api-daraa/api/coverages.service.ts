/**
 * Daraa
 * This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.
 *
 * The version of the OpenAPI document: 9.3.52
 * Contact: mgalluch@cubewerx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class CoveragesService {

    protected basePath = 'https://test.cubewerx.com/cubewerx/cubeserv/demo/ogcapi/Daraa';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * The domain set of the coverage of a collection.
     * @param collectionId The identifier of a collection in this data store.
     * @param subset Specifies a subset of the coverage along one or more axes.  See the \&quot;OGC API - Coverages - Part 1: Core\&quot; specification for a description of the syntax.
     * @param scaleFactor A scale factor to be applied to all coverage axes.  A value of 1 leaves the coverage unscaled, a value between 0 and 1 scales down (reduces target domain), and a value greater than 1 scales up (enlarges target domain).
     * @param scaleAxes See Requirement 20 of the \&quot;OGC® Web Coverage Service Interface Standard - Scaling Extension\&quot; (OGC 12-039).
     * @param scaleSize See Requirement 21 of the \&quot;OGC® Web Coverage Service Interface Standard - Scaling Extension\&quot; (OGC 12-039).
     * @param scaleExtent See Requirement 22 of the \&quot;OGC® Web Coverage Service Interface Standard - Scaling Extension\&quot; (OGC 12-039).
     * @param bbox Specifies a subset of the coverage using a bounding box (as an alternative to using the subset parameter). The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the \&#39;bbox-crs\&#39; parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
     * @param bboxCrs The coordinate reference system of the specified bbox.
     * @param width The number of samples wide to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
     * @param height The number of samples high to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdCoverageDomainsetGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, f?: 'json' | 'html', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<object>;
    public collectionsCollectionIdCoverageDomainsetGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, f?: 'json' | 'html', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpResponse<object>>;
    public collectionsCollectionIdCoverageDomainsetGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, f?: 'json' | 'html', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpEvent<object>>;
    public collectionsCollectionIdCoverageDomainsetGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, f?: 'json' | 'html', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdCoverageDomainsetGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (subset) {
            queryParameters = this.addToHttpParams(queryParameters,
                subset.join(COLLECTION_FORMATS['csv']), 'subset');
        }
        if (scaleFactor !== undefined && scaleFactor !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleFactor, 'scale-factor');
        }
        if (scaleAxes !== undefined && scaleAxes !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleAxes, 'scale-axes');
        }
        if (scaleSize !== undefined && scaleSize !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleSize, 'scale-size');
        }
        if (scaleExtent !== undefined && scaleExtent !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleExtent, 'scale-extent');
        }
        if (bbox) {
            queryParameters = this.addToHttpParams(queryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (bboxCrs !== undefined && bboxCrs !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>bboxCrs, 'bbox-crs');
        }
        if (width !== undefined && width !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>height, 'height');
        }
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html',
                'application/problem+json',
                'text/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<object>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/coverage/domainset`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * The coverage of a collection.
     * @param collectionId The identifier of a collection in this data store.
     * @param subset Specifies a subset of the coverage along one or more axes.  See the \&quot;OGC API - Coverages - Part 1: Core\&quot; specification for a description of the syntax.
     * @param scaleFactor A scale factor to be applied to all coverage axes.  A value of 1 leaves the coverage unscaled, a value between 0 and 1 scales down (reduces target domain), and a value greater than 1 scales up (enlarges target domain).
     * @param scaleAxes See Requirement 20 of the \&quot;OGC® Web Coverage Service Interface Standard - Scaling Extension\&quot; (OGC 12-039).
     * @param scaleSize See Requirement 21 of the \&quot;OGC® Web Coverage Service Interface Standard - Scaling Extension\&quot; (OGC 12-039).
     * @param scaleExtent See Requirement 22 of the \&quot;OGC® Web Coverage Service Interface Standard - Scaling Extension\&quot; (OGC 12-039).
     * @param bbox Specifies a subset of the coverage using a bounding box (as an alternative to using the subset parameter). The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the \&#39;bbox-crs\&#39; parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
     * @param bboxCrs The coordinate reference system of the specified bbox.
     * @param width The number of samples wide to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
     * @param height The number of samples high to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
     * @param transform Specifies one or more transformations to apply.  See the CubeWerx Suite product documentation for details.
     * @param alphaChannel Whether or not the GeoTIFF should include an alpha channel (as apposed to a GDAL NODATA tag) to indicate areas of no data.  The default value depends on the type of the coverage.  For numeric types, the NODATA tag is well-defined and interoperable, and is likely what most coverage clients will expect, so a default value of false will be used.  For color types, however, the NODATA tag is ill-defined and not interoperable, so a default value of true will be used.
     * @param responseHandler If this parameter is present, the client will receive an immediate acknowledgement response (with an HTTP status of 202), and the preparation of the coverage will be performed offline.  When the coverage is ready (or if an error occurs), the client will be informed via the specified response handler.  This provides the ability to request a coverage that would normally be too large or take too long to be handled within the confines of an HTTP request.  Currently the only supported response handler scheme is \&quot;mailto:\&quot; (e.g., \&quot;mailto:me@myaddress.com\&quot;.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdCoverageGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, transform?: Array<string>, alphaChannel?: 'true' | 'false' | 'default', responseHandler?: string, f?: 'geotiff' | 'html', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/geo+tiff' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json'}): Observable<Blob>;
    public collectionsCollectionIdCoverageGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, transform?: Array<string>, alphaChannel?: 'true' | 'false' | 'default', responseHandler?: string, f?: 'geotiff' | 'html', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/geo+tiff' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json'}): Observable<HttpResponse<Blob>>;
    public collectionsCollectionIdCoverageGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, transform?: Array<string>, alphaChannel?: 'true' | 'false' | 'default', responseHandler?: string, f?: 'geotiff' | 'html', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/geo+tiff' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json'}): Observable<HttpEvent<Blob>>;
    public collectionsCollectionIdCoverageGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, transform?: Array<string>, alphaChannel?: 'true' | 'false' | 'default', responseHandler?: string, f?: 'geotiff' | 'html', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/geo+tiff' | 'text/html' | 'application/problem+json' | 'text/xml' | 'application/json'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdCoverageGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (subset) {
            queryParameters = this.addToHttpParams(queryParameters,
                subset.join(COLLECTION_FORMATS['csv']), 'subset');
        }
        if (scaleFactor !== undefined && scaleFactor !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleFactor, 'scale-factor');
        }
        if (scaleAxes !== undefined && scaleAxes !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleAxes, 'scale-axes');
        }
        if (scaleSize !== undefined && scaleSize !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleSize, 'scale-size');
        }
        if (scaleExtent !== undefined && scaleExtent !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleExtent, 'scale-extent');
        }
        if (bbox) {
            queryParameters = this.addToHttpParams(queryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (bboxCrs !== undefined && bboxCrs !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>bboxCrs, 'bbox-crs');
        }
        if (width !== undefined && width !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>height, 'height');
        }
        if (transform) {
            queryParameters = this.addToHttpParams(queryParameters,
                transform.join(COLLECTION_FORMATS['csv']), 'transform');
        }
        if (alphaChannel !== undefined && alphaChannel !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>alphaChannel, 'alphaChannel');
        }
        if (responseHandler !== undefined && responseHandler !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>responseHandler, 'responseHandler');
        }
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/geo+tiff',
                'text/html',
                'application/problem+json',
                'text/xml',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/coverage`,
            {
                params: queryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * The range type of the coverage of a collection.
     * @param collectionId The identifier of a collection in this data store.
     * @param subset Specifies a subset of the coverage along one or more axes.  See the \&quot;OGC API - Coverages - Part 1: Core\&quot; specification for a description of the syntax.
     * @param scaleFactor A scale factor to be applied to all coverage axes.  A value of 1 leaves the coverage unscaled, a value between 0 and 1 scales down (reduces target domain), and a value greater than 1 scales up (enlarges target domain).
     * @param scaleAxes See Requirement 20 of the \&quot;OGC® Web Coverage Service Interface Standard - Scaling Extension\&quot; (OGC 12-039).
     * @param scaleSize See Requirement 21 of the \&quot;OGC® Web Coverage Service Interface Standard - Scaling Extension\&quot; (OGC 12-039).
     * @param scaleExtent See Requirement 22 of the \&quot;OGC® Web Coverage Service Interface Standard - Scaling Extension\&quot; (OGC 12-039).
     * @param bbox Specifies a subset of the coverage using a bounding box (as an alternative to using the subset parameter). The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth):  * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified by the \&#39;bbox-crs\&#39; parameter.  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
     * @param bboxCrs The coordinate reference system of the specified bbox.
     * @param width The number of samples wide to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
     * @param height The number of samples high to scale the requested coverage subset to.  This is an alternative to using the scaleSize parameter.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdCoverageRangetypeGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, f?: 'json' | 'html', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<object>;
    public collectionsCollectionIdCoverageRangetypeGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, f?: 'json' | 'html', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpResponse<object>>;
    public collectionsCollectionIdCoverageRangetypeGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, f?: 'json' | 'html', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpEvent<object>>;
    public collectionsCollectionIdCoverageRangetypeGet(collectionId: 'Daraa_DTED' | 'Daraa_mosaic_2019', subset?: Array<string>, scaleFactor?: number, scaleAxes?: string, scaleSize?: string, scaleExtent?: string, bbox?: Array<number>, bboxCrs?: string, width?: number, height?: number, f?: 'json' | 'html', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdCoverageRangetypeGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (subset) {
            queryParameters = this.addToHttpParams(queryParameters,
                subset.join(COLLECTION_FORMATS['csv']), 'subset');
        }
        if (scaleFactor !== undefined && scaleFactor !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleFactor, 'scale-factor');
        }
        if (scaleAxes !== undefined && scaleAxes !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleAxes, 'scale-axes');
        }
        if (scaleSize !== undefined && scaleSize !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleSize, 'scale-size');
        }
        if (scaleExtent !== undefined && scaleExtent !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>scaleExtent, 'scale-extent');
        }
        if (bbox) {
            queryParameters = this.addToHttpParams(queryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (bboxCrs !== undefined && bboxCrs !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>bboxCrs, 'bbox-crs');
        }
        if (width !== undefined && width !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>width, 'width');
        }
        if (height !== undefined && height !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>height, 'height');
        }
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html',
                'application/problem+json',
                'text/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<object>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/coverage/rangetype`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
