/**
 * Daraa
 * This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.
 *
 * The version of the OpenAPI document: 9.3.52
 * Contact: mgalluch@cubewerx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class MapTilesService {

    protected basePath = 'https://test.cubewerx.com/cubewerx/cubeserv/demo/ogcapi/Daraa';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * A metadata document describing the map tilesets that are available for the specified collection.
     * @param collectionId The identifier of a collection in this data store.
     * @param styleId The identifier of a style in this data store that\&#39;s compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdMapTilesGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any>;
    public collectionsCollectionIdMapTilesGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdMapTilesGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdMapTilesGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdMapTilesGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (styleId !== undefined && styleId !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>styleId, 'styleId');
        }
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }
        if (pretty !== undefined && pretty !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pretty, 'pretty');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html',
                'application/problem+json',
                'text/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/map/tiles`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A metadata document describing the map tiles that are available for the specified collection in the specified tile-matrix set.
     * @param collectionId The identifier of a collection in this data store.
     * @param tileMatrixSetId The identifier of a tile-matrix set that this collection is available in.
     * @param styleId The identifier of a style in this data store that\&#39;s compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdMapTilesTileMatrixSetIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any>;
    public collectionsCollectionIdMapTilesTileMatrixSetIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdMapTilesTileMatrixSetIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdMapTilesTileMatrixSetIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdMapTilesTileMatrixSetIdGet.');
        }
        if (tileMatrixSetId === null || tileMatrixSetId === undefined) {
            throw new Error('Required parameter tileMatrixSetId was null or undefined when calling collectionsCollectionIdMapTilesTileMatrixSetIdGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (styleId !== undefined && styleId !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>styleId, 'styleId');
        }
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }
        if (pretty !== undefined && pretty !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pretty, 'pretty');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html',
                'application/problem+json',
                'text/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/map/tiles/${encodeURIComponent(String(tileMatrixSetId))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A legend image showing a graphical representation of the specified collection as it would appear in the corresponding map tiles of the specified zoom level.
     * @param collectionId The identifier of a collection in this data store.
     * @param tileMatrixSetId The identifier of a tile-matrix set that this collection is available in.
     * @param tileMatrix The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set.
     * @param styleId The identifier of a style in this data store that\&#39;s compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
     * @param transparent Whether or not the background of the image should be transparent (when supported by the requested image format).
     * @param bgcolor Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
     * @param textcolor Hexadecimal red-green-blue color value for the text color.  If not specified, a color that contrasts the background color will be used.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.  A value of \&quot;jop\&quot; (content type \&quot;image/x-jpegorpng\&quot;) indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \&quot;wkb\&quot; indicates CubeWerx\&#39;s raster extension to the Well-Known-Binary format.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixLegendGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, textcolor?: string, f?: 'jop' | 'jpeg' | 'png' | 'tiff' | 'gif' | 'wkb', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any>;
    public collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixLegendGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, textcolor?: string, f?: 'jop' | 'jpeg' | 'png' | 'tiff' | 'gif' | 'wkb', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixLegendGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, textcolor?: string, f?: 'jop' | 'jpeg' | 'png' | 'tiff' | 'gif' | 'wkb', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixLegendGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, textcolor?: string, f?: 'jop' | 'jpeg' | 'png' | 'tiff' | 'gif' | 'wkb', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixLegendGet.');
        }
        if (tileMatrixSetId === null || tileMatrixSetId === undefined) {
            throw new Error('Required parameter tileMatrixSetId was null or undefined when calling collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixLegendGet.');
        }
        if (tileMatrix === null || tileMatrix === undefined) {
            throw new Error('Required parameter tileMatrix was null or undefined when calling collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixLegendGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (styleId !== undefined && styleId !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>styleId, 'styleId');
        }
        if (transparent !== undefined && transparent !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>transparent, 'transparent');
        }
        if (bgcolor !== undefined && bgcolor !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>bgcolor, 'bgcolor');
        }
        if (textcolor !== undefined && textcolor !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>textcolor, 'textcolor');
        }
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html',
                'application/problem+json',
                'text/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/map/tiles/${encodeURIComponent(String(tileMatrixSetId))}/${encodeURIComponent(String(tileMatrix))}/legend`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A map tile of the specified collection.
     * @param collectionId The identifier of a collection in this data store.
     * @param tileMatrixSetId The identifier of a tile-matrix set that this collection is available in.
     * @param tileMatrix The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set.
     * @param tileRow The zero-based row index of the tile in the specified tile matrix.
     * @param tileCol The zero-based column index of the tile in the specified tile matrix.
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \&quot;2018-02-12T23:20:50Z\&quot; * A closed interval: \&quot;2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\&quot; * Open intervals: \&quot;2018-02-12T00:00:00Z/..\&quot; or \&quot;../2018-03-18T12:31:12Z\&quot;  Only elements that have a temporal property that intersects the value of &#x60;datetime&#x60; are selected.
     * @param styleId The identifier of a style in this data store that\&#39;s compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
     * @param transparent Whether or not the background of the image should be transparent (when supported by the requested image format).
     * @param bgcolor Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.  A value of \&quot;jop\&quot; (content type \&quot;image/x-jpegorpng\&quot;) indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this tile.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, tileRow: number, tileCol: number, datetime?: string, styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, f?: 'jop' | 'png' | 'tiff' | 'gif' | 'jpeg' | 'mvt', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/x-jpegorpng' | 'image/jpeg' | 'image/png' | 'image/gif' | 'application/x-cubewerx-wkb' | 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json'}): Observable<any>;
    public collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, tileRow: number, tileCol: number, datetime?: string, styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, f?: 'jop' | 'png' | 'tiff' | 'gif' | 'jpeg' | 'mvt', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/x-jpegorpng' | 'image/jpeg' | 'image/png' | 'image/gif' | 'application/x-cubewerx-wkb' | 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json'}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, tileRow: number, tileCol: number, datetime?: string, styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, f?: 'jop' | 'png' | 'tiff' | 'gif' | 'jpeg' | 'mvt', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/x-jpegorpng' | 'image/jpeg' | 'image/png' | 'image/gif' | 'application/x-cubewerx-wkb' | 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json'}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, tileRow: number, tileCol: number, datetime?: string, styleId?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, f?: 'jop' | 'png' | 'tiff' | 'gif' | 'jpeg' | 'mvt', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/x-jpegorpng' | 'image/jpeg' | 'image/png' | 'image/gif' | 'application/x-cubewerx-wkb' | 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }
        if (tileMatrixSetId === null || tileMatrixSetId === undefined) {
            throw new Error('Required parameter tileMatrixSetId was null or undefined when calling collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }
        if (tileMatrix === null || tileMatrix === undefined) {
            throw new Error('Required parameter tileMatrix was null or undefined when calling collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }
        if (tileRow === null || tileRow === undefined) {
            throw new Error('Required parameter tileRow was null or undefined when calling collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }
        if (tileCol === null || tileCol === undefined) {
            throw new Error('Required parameter tileCol was null or undefined when calling collectionsCollectionIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (datetime !== undefined && datetime !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>datetime, 'datetime');
        }
        if (styleId !== undefined && styleId !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>styleId, 'styleId');
        }
        if (transparent !== undefined && transparent !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>transparent, 'transparent');
        }
        if (bgcolor !== undefined && bgcolor !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>bgcolor, 'bgcolor');
        }
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/x-jpegorpng',
                'image/jpeg',
                'image/png',
                'image/gif',
                'application/x-cubewerx-wkb',
                'application/problem+json',
                'text/xml',
                'text/html',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/map/tiles/${encodeURIComponent(String(tileMatrixSetId))}/${encodeURIComponent(String(tileMatrix))}/${encodeURIComponent(String(tileRow))}/${encodeURIComponent(String(tileCol))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A metadata document describing the map tiles that are available for the specified collection in the specified style.  (Note: The output of this endpoint is likely changing.)
     * @param collectionId The identifier of a collection in this data store.
     * @param styleId The identifier of a style in this data store that\&#39;s compatible with the specified collection.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdStylesStyleIdMapTilesGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any>;
    public collectionsCollectionIdStylesStyleIdMapTilesGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdStylesStyleIdMapTilesGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdStylesStyleIdMapTilesGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', f?: 'json' | 'html', pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesGet.');
        }
        if (styleId === null || styleId === undefined) {
            throw new Error('Required parameter styleId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }
        if (pretty !== undefined && pretty !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pretty, 'pretty');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html',
                'application/problem+json',
                'text/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/styles/${encodeURIComponent(String(styleId))}/map/tiles`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A metadata document describing the map tiles that are available for the specified collection in the specified tile-matrix set in the specified style.
     * @param collectionId The identifier of a collection in this data store.
     * @param styleId The identifier of a style in this data store that\&#39;s compatible with the specified collection.
     * @param tileMatrixSetId The identifier of a tile-matrix set that this collection is available in.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', f?: 'json' | 'html', pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any>;
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', f?: 'json' | 'html', pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', f?: 'json' | 'html', pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', f?: 'json' | 'html', pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdGet.');
        }
        if (styleId === null || styleId === undefined) {
            throw new Error('Required parameter styleId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdGet.');
        }
        if (tileMatrixSetId === null || tileMatrixSetId === undefined) {
            throw new Error('Required parameter tileMatrixSetId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }
        if (pretty !== undefined && pretty !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pretty, 'pretty');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html',
                'application/problem+json',
                'text/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/styles/${encodeURIComponent(String(styleId))}/map/tiles/${encodeURIComponent(String(tileMatrixSetId))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A legend image showing a graphical representation of the specified collection as it would appear in the corresponding map tiles of the specified zoom level in the specified style.
     * @param collectionId The identifier of a collection in this data store.
     * @param styleId The identifier of a style in this data store that\&#39;s compatible with the specified collection.
     * @param tileMatrixSetId The identifier of a tile-matrix set that this collection is available in.
     * @param tileMatrix The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set.
     * @param transparent Whether or not the background of the image should be transparent (when supported by the requested image format).
     * @param bgcolor Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
     * @param textcolor Hexadecimal red-green-blue color value for the text color.  If not specified, a color that contrasts the background color will be used.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.  A value of \&quot;jop\&quot; (content type \&quot;image/x-jpegorpng\&quot;) indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this particular image.  A value of \&quot;wkb\&quot; indicates CubeWerx\&#39;s raster extension to the Well-Known-Binary format.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixLegendGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, transparent?: boolean, bgcolor?: string, textcolor?: string, f?: 'jop' | 'jpeg' | 'png' | 'tiff' | 'gif' | 'wkb', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any>;
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixLegendGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, transparent?: boolean, bgcolor?: string, textcolor?: string, f?: 'jop' | 'jpeg' | 'png' | 'tiff' | 'gif' | 'wkb', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixLegendGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, transparent?: boolean, bgcolor?: string, textcolor?: string, f?: 'jop' | 'jpeg' | 'png' | 'tiff' | 'gif' | 'wkb', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixLegendGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, transparent?: boolean, bgcolor?: string, textcolor?: string, f?: 'jop' | 'jpeg' | 'png' | 'tiff' | 'gif' | 'wkb', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'text/html' | 'application/problem+json' | 'text/xml'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixLegendGet.');
        }
        if (styleId === null || styleId === undefined) {
            throw new Error('Required parameter styleId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixLegendGet.');
        }
        if (tileMatrixSetId === null || tileMatrixSetId === undefined) {
            throw new Error('Required parameter tileMatrixSetId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixLegendGet.');
        }
        if (tileMatrix === null || tileMatrix === undefined) {
            throw new Error('Required parameter tileMatrix was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixLegendGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (transparent !== undefined && transparent !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>transparent, 'transparent');
        }
        if (bgcolor !== undefined && bgcolor !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>bgcolor, 'bgcolor');
        }
        if (textcolor !== undefined && textcolor !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>textcolor, 'textcolor');
        }
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json',
                'text/html',
                'application/problem+json',
                'text/xml'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/styles/${encodeURIComponent(String(styleId))}/map/tiles/${encodeURIComponent(String(tileMatrixSetId))}/${encodeURIComponent(String(tileMatrix))}/legend`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * A map tile of the specified collection in the specified style.
     * @param collectionId The identifier of a collection in this data store.
     * @param styleId The identifier of a style in this data store that\&#39;s compatible with the specified collection.
     * @param tileMatrixSetId The identifier of a tile-matrix set that this collection is available in.
     * @param tileMatrix The identifier of a tile matrix (typically a zoom level) within the specified tile-matrix set.
     * @param tileRow The zero-based row index of the tile in the specified tile matrix.
     * @param tileCol The zero-based column index of the tile in the specified tile matrix.
     * @param datetime Either a date-time or an interval, open or closed. Date and time expressions adhere to RFC 3339.  Open intervals are expressed using double-dots.  Examples:  * A date-time: \&quot;2018-02-12T23:20:50Z\&quot; * A closed interval: \&quot;2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\&quot; * Open intervals: \&quot;2018-02-12T00:00:00Z/..\&quot; or \&quot;../2018-03-18T12:31:12Z\&quot;  Only elements that have a temporal property that intersects the value of &#x60;datetime&#x60; are selected.
     * @param styleId2 The identifier of a style in this data store that\&#39;s compatible with the specified collection.  If no styleId parameter is present, the default style of the collection will be rendered.
     * @param transparent Whether or not the background of the image should be transparent (when supported by the requested image format).
     * @param bgcolor Hexadecimal red-green-blue color value for the background color.  If not specified, the background color specified by the style (0xFFFFFF by default) will be used.
     * @param f A token indicating the content type to return.  Overrides the HTTP \&quot;Accept\&quot; header if present.  A value of \&quot;jop\&quot; (content type \&quot;image/x-jpegorpng\&quot;) indicates that either JPEG or PNG should be returned, whichever the server deems to be most appropriate for this tile.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, tileRow: number, tileCol: number, datetime?: string, styleId2?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, f?: 'jop' | 'png' | 'tiff' | 'gif' | 'jpeg' | 'mvt', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/x-jpegorpng' | 'image/jpeg' | 'image/png' | 'image/gif' | 'application/x-cubewerx-wkb' | 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json'}): Observable<any>;
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, tileRow: number, tileCol: number, datetime?: string, styleId2?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, f?: 'jop' | 'png' | 'tiff' | 'gif' | 'jpeg' | 'mvt', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/x-jpegorpng' | 'image/jpeg' | 'image/png' | 'image/gif' | 'application/x-cubewerx-wkb' | 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json'}): Observable<HttpResponse<any>>;
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, tileRow: number, tileCol: number, datetime?: string, styleId2?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, f?: 'jop' | 'png' | 'tiff' | 'gif' | 'jpeg' | 'mvt', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/x-jpegorpng' | 'image/jpeg' | 'image/png' | 'image/gif' | 'application/x-cubewerx-wkb' | 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json'}): Observable<HttpEvent<any>>;
    public collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'Daraa_DTED' | 'Daraa_mosaic_2019' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', styleId: 'Topographic' | 'Overlay' | 'Night' | 'default', tileMatrixSetId: 'wgs84' | '3395' | 'smerc', tileMatrix: string, tileRow: number, tileCol: number, datetime?: string, styleId2?: 'Topographic' | 'Overlay' | 'Night' | 'default', transparent?: boolean, bgcolor?: string, f?: 'jop' | 'png' | 'tiff' | 'gif' | 'jpeg' | 'mvt', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/x-jpegorpng' | 'image/jpeg' | 'image/png' | 'image/gif' | 'application/x-cubewerx-wkb' | 'application/problem+json' | 'text/xml' | 'text/html' | 'application/json'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }
        if (styleId === null || styleId === undefined) {
            throw new Error('Required parameter styleId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }
        if (tileMatrixSetId === null || tileMatrixSetId === undefined) {
            throw new Error('Required parameter tileMatrixSetId was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }
        if (tileMatrix === null || tileMatrix === undefined) {
            throw new Error('Required parameter tileMatrix was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }
        if (tileRow === null || tileRow === undefined) {
            throw new Error('Required parameter tileRow was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }
        if (tileCol === null || tileCol === undefined) {
            throw new Error('Required parameter tileCol was null or undefined when calling collectionsCollectionIdStylesStyleIdMapTilesTileMatrixSetIdTileMatrixTileRowTileColGet.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (datetime !== undefined && datetime !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>datetime, 'datetime');
        }
        if (styleId2 !== undefined && styleId2 !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>styleId2, 'styleId');
        }
        if (transparent !== undefined && transparent !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>transparent, 'transparent');
        }
        if (bgcolor !== undefined && bgcolor !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>bgcolor, 'bgcolor');
        }
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/x-jpegorpng',
                'image/jpeg',
                'image/png',
                'image/gif',
                'application/x-cubewerx-wkb',
                'application/problem+json',
                'text/xml',
                'text/html',
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/styles/${encodeURIComponent(String(styleId))}/map/tiles/${encodeURIComponent(String(tileMatrixSetId))}/${encodeURIComponent(String(tileMatrix))}/${encodeURIComponent(String(tileRow))}/${encodeURIComponent(String(tileCol))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
