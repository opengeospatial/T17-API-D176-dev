/**
 * Daraa
 * This data store is offered by CubeWerx Inc. as a demonstration of its in-progress OGC API implementation.
 *
 * The version of the OpenAPI document: 9.3.52
 * Contact: mgalluch@cubewerx.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class VectorFeaturesAndCatalogueRecordsService {

    protected basePath = 'https://test.cubewerx.com/cubewerx/cubeserv/demo/ogcapi/Daraa';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * This operation retreives the specified feature from the specified collection
     * GetItem operation
     * @param collectionId Name of a feature collection offered by the service
     * @param featureId Locate identifier for a specific feature
     * @param f A MIME type indicating the representation of the resources to be presented (e.g. application/gml+xml; version&#x3D;3.2 for GML 3.2).
     * @param resultType The possible values for this parameter are \&quot;results\&quot; and \&quot;hits\&quot;. If the value of the resultType parameter is set to \&quot;results\&quot; the server shall generate a complete response document containing resources that satisfy the operation. The root element of the response container shall include a count of the number of resources actually presented in the response document. The root element of the response container shall also include a count of the total number of resources that the operations actually found which will always be equal to or greater than the number of resource presented in the response document. If the value of the resultType attribute is set to \&quot;hits\&quot; the server shall generate an empty response document containing no resource instances and the root element of the response container shall contain the count of the total number of resources that the operation found. The value for the number of resources presented in the response document shall be set to zero.
     * @param propertyName A list of feature properties to include in the response.  For some output formats, such as XML that can be validate against a formal schema, this list represents the optional properties to include in the response.
     * @param coordPrecision Number of digits after the decimal point to use when presenting result in a text-base output format such as XML or JSON
     * @param css A reference to a CSS to be applied to HTML-based output formats; ignored otherwise
     * @param xslt A reference to a XSLT to be applied to XML-based output formats; ignored otherwise
     * @param kmlStyleURL A reference to a KML style shere to be applied to KML-based output formats; ignored otherwise
     * @param resolution Specifies the resolution of a display port in the event that the WFS output is intended for display; the server attempts to simplify each output geometry by removing unnecessary verticies and this triming the size of the response.
     * @param responseHandler Tiggers asynchronous processing of the request; notification is sent to the endpoint specified as the value of the parameter.
     * @param crs Asserts the CRS to use for encoding features in the response document.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFeature(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', featureId: string, f?: 'application/gml+xml' | 'GML' | 'application/x-bxfs+xml; version=1.0.0' | 'application/x-bxfs+xml; version=0.0.3' | 'text/xml; subtype=bxfs/0.0.3' | 'text/xml; subtype=bxfs/1.0.0' | 'GML0' | 'BXFS' | 'GML.1' | 'GML1' | 'application/gml+xml; version=2.1' | 'application/gml+xml; version=2.1.2' | 'text/xml; subtype=gml/2.1' | 'text/xml; subtype=gml/2.1.2' | 'GML2' | 'application/gml+xml; version=3.1' | 'application/gml+xml; version=3.1.1' | 'text/xml; subtype=gml/3.1' | 'text/xml; subtype=gml/3.1.1' | 'GML3' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1.1; profile=gmlsf0' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1; profile=gmlsf0' | 'GML3L0' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1.1; profile=gmlsf1' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1; profile=gmlsf1' | 'GML3L1' | 'application/gml+xml; version=3.2' | 'text/xml; subtype=gml/3.2' | 'GML32' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.2; profile=gmlsf0' | 'GML32L0' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.2; profile=gmlsf1' | 'GML32L1' | 'application/rss+xml' | 'RSS' | 'application/atom+xml' | 'ATOM' | 'application/vnd.google-earth.kml+xml' | 'KML' | 'application/vnd.google-earth.kmz' | 'KMZ' | 'text/html' | 'HTML' | 'HTMLTAB' | 'HTMLETAB' | 'HTMLDIV' | 'HTMLEDIV' | 'application/geo+json' | 'geojson' | 'application/json' | 'application/vnd.geo+json' | 'application/vnd.ogc.fg+json' | 'jsonfg' | 'application/fg+json' | 'application/vnd.shp+octet-stream' | 'SHAPE' | 'text/json' | 'json' | 'text/xml' | 'XML', resultType?: 'hits' | 'results', propertyName?: string, coordPrecision?: number, css?: string, xslt?: string, kmlStyleURL?: string, resolution?: number, responseHandler?: string, crs?: string, pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml' | 'text/html' | 'application/json' | 'application/geo+json' | 'application/gml+xml' | 'application/x-bxfs+xml' | 'application/rss+xml' | 'application/atom+xml' | 'application/vnd.google-earth.kml+xml' | 'application/vnd.google-earth.kmz' | 'application/vnd.shp+octet-stream' | 'application/problem+json'}): Observable<string>;
    public getFeature(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', featureId: string, f?: 'application/gml+xml' | 'GML' | 'application/x-bxfs+xml; version=1.0.0' | 'application/x-bxfs+xml; version=0.0.3' | 'text/xml; subtype=bxfs/0.0.3' | 'text/xml; subtype=bxfs/1.0.0' | 'GML0' | 'BXFS' | 'GML.1' | 'GML1' | 'application/gml+xml; version=2.1' | 'application/gml+xml; version=2.1.2' | 'text/xml; subtype=gml/2.1' | 'text/xml; subtype=gml/2.1.2' | 'GML2' | 'application/gml+xml; version=3.1' | 'application/gml+xml; version=3.1.1' | 'text/xml; subtype=gml/3.1' | 'text/xml; subtype=gml/3.1.1' | 'GML3' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1.1; profile=gmlsf0' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1; profile=gmlsf0' | 'GML3L0' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1.1; profile=gmlsf1' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1; profile=gmlsf1' | 'GML3L1' | 'application/gml+xml; version=3.2' | 'text/xml; subtype=gml/3.2' | 'GML32' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.2; profile=gmlsf0' | 'GML32L0' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.2; profile=gmlsf1' | 'GML32L1' | 'application/rss+xml' | 'RSS' | 'application/atom+xml' | 'ATOM' | 'application/vnd.google-earth.kml+xml' | 'KML' | 'application/vnd.google-earth.kmz' | 'KMZ' | 'text/html' | 'HTML' | 'HTMLTAB' | 'HTMLETAB' | 'HTMLDIV' | 'HTMLEDIV' | 'application/geo+json' | 'geojson' | 'application/json' | 'application/vnd.geo+json' | 'application/vnd.ogc.fg+json' | 'jsonfg' | 'application/fg+json' | 'application/vnd.shp+octet-stream' | 'SHAPE' | 'text/json' | 'json' | 'text/xml' | 'XML', resultType?: 'hits' | 'results', propertyName?: string, coordPrecision?: number, css?: string, xslt?: string, kmlStyleURL?: string, resolution?: number, responseHandler?: string, crs?: string, pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml' | 'text/html' | 'application/json' | 'application/geo+json' | 'application/gml+xml' | 'application/x-bxfs+xml' | 'application/rss+xml' | 'application/atom+xml' | 'application/vnd.google-earth.kml+xml' | 'application/vnd.google-earth.kmz' | 'application/vnd.shp+octet-stream' | 'application/problem+json'}): Observable<HttpResponse<string>>;
    public getFeature(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', featureId: string, f?: 'application/gml+xml' | 'GML' | 'application/x-bxfs+xml; version=1.0.0' | 'application/x-bxfs+xml; version=0.0.3' | 'text/xml; subtype=bxfs/0.0.3' | 'text/xml; subtype=bxfs/1.0.0' | 'GML0' | 'BXFS' | 'GML.1' | 'GML1' | 'application/gml+xml; version=2.1' | 'application/gml+xml; version=2.1.2' | 'text/xml; subtype=gml/2.1' | 'text/xml; subtype=gml/2.1.2' | 'GML2' | 'application/gml+xml; version=3.1' | 'application/gml+xml; version=3.1.1' | 'text/xml; subtype=gml/3.1' | 'text/xml; subtype=gml/3.1.1' | 'GML3' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1.1; profile=gmlsf0' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1; profile=gmlsf0' | 'GML3L0' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1.1; profile=gmlsf1' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1; profile=gmlsf1' | 'GML3L1' | 'application/gml+xml; version=3.2' | 'text/xml; subtype=gml/3.2' | 'GML32' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.2; profile=gmlsf0' | 'GML32L0' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.2; profile=gmlsf1' | 'GML32L1' | 'application/rss+xml' | 'RSS' | 'application/atom+xml' | 'ATOM' | 'application/vnd.google-earth.kml+xml' | 'KML' | 'application/vnd.google-earth.kmz' | 'KMZ' | 'text/html' | 'HTML' | 'HTMLTAB' | 'HTMLETAB' | 'HTMLDIV' | 'HTMLEDIV' | 'application/geo+json' | 'geojson' | 'application/json' | 'application/vnd.geo+json' | 'application/vnd.ogc.fg+json' | 'jsonfg' | 'application/fg+json' | 'application/vnd.shp+octet-stream' | 'SHAPE' | 'text/json' | 'json' | 'text/xml' | 'XML', resultType?: 'hits' | 'results', propertyName?: string, coordPrecision?: number, css?: string, xslt?: string, kmlStyleURL?: string, resolution?: number, responseHandler?: string, crs?: string, pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml' | 'text/html' | 'application/json' | 'application/geo+json' | 'application/gml+xml' | 'application/x-bxfs+xml' | 'application/rss+xml' | 'application/atom+xml' | 'application/vnd.google-earth.kml+xml' | 'application/vnd.google-earth.kmz' | 'application/vnd.shp+octet-stream' | 'application/problem+json'}): Observable<HttpEvent<string>>;
    public getFeature(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', featureId: string, f?: 'application/gml+xml' | 'GML' | 'application/x-bxfs+xml; version=1.0.0' | 'application/x-bxfs+xml; version=0.0.3' | 'text/xml; subtype=bxfs/0.0.3' | 'text/xml; subtype=bxfs/1.0.0' | 'GML0' | 'BXFS' | 'GML.1' | 'GML1' | 'application/gml+xml; version=2.1' | 'application/gml+xml; version=2.1.2' | 'text/xml; subtype=gml/2.1' | 'text/xml; subtype=gml/2.1.2' | 'GML2' | 'application/gml+xml; version=3.1' | 'application/gml+xml; version=3.1.1' | 'text/xml; subtype=gml/3.1' | 'text/xml; subtype=gml/3.1.1' | 'GML3' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1.1; profile=gmlsf0' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1; profile=gmlsf0' | 'GML3L0' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1.1; profile=gmlsf1' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1; profile=gmlsf1' | 'GML3L1' | 'application/gml+xml; version=3.2' | 'text/xml; subtype=gml/3.2' | 'GML32' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.2; profile=gmlsf0' | 'GML32L0' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.2; profile=gmlsf1' | 'GML32L1' | 'application/rss+xml' | 'RSS' | 'application/atom+xml' | 'ATOM' | 'application/vnd.google-earth.kml+xml' | 'KML' | 'application/vnd.google-earth.kmz' | 'KMZ' | 'text/html' | 'HTML' | 'HTMLTAB' | 'HTMLETAB' | 'HTMLDIV' | 'HTMLEDIV' | 'application/geo+json' | 'geojson' | 'application/json' | 'application/vnd.geo+json' | 'application/vnd.ogc.fg+json' | 'jsonfg' | 'application/fg+json' | 'application/vnd.shp+octet-stream' | 'SHAPE' | 'text/json' | 'json' | 'text/xml' | 'XML', resultType?: 'hits' | 'results', propertyName?: string, coordPrecision?: number, css?: string, xslt?: string, kmlStyleURL?: string, resolution?: number, responseHandler?: string, crs?: string, pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml' | 'text/html' | 'application/json' | 'application/geo+json' | 'application/gml+xml' | 'application/x-bxfs+xml' | 'application/rss+xml' | 'application/atom+xml' | 'application/vnd.google-earth.kml+xml' | 'application/vnd.google-earth.kmz' | 'application/vnd.shp+octet-stream' | 'application/problem+json'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling getFeature.');
        }
        if (featureId === null || featureId === undefined) {
            throw new Error('Required parameter featureId was null or undefined when calling getFeature.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }
        if (resultType !== undefined && resultType !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>resultType, 'resultType');
        }
        if (propertyName !== undefined && propertyName !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>propertyName, 'propertyName');
        }
        if (coordPrecision !== undefined && coordPrecision !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>coordPrecision, 'coordPrecision');
        }
        if (css !== undefined && css !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>css, 'css');
        }
        if (xslt !== undefined && xslt !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>xslt, 'xslt');
        }
        if (kmlStyleURL !== undefined && kmlStyleURL !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>kmlStyleURL, 'kmlStyleURL');
        }
        if (resolution !== undefined && resolution !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>resolution, 'resolution');
        }
        if (responseHandler !== undefined && responseHandler !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>responseHandler, 'responseHandler');
        }
        if (crs !== undefined && crs !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>crs, 'crs');
        }
        if (pretty !== undefined && pretty !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pretty, 'pretty');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml',
                'text/html',
                'application/json',
                'application/geo+json',
                'application/gml+xml',
                'application/x-bxfs+xml',
                'application/rss+xml',
                'application/atom+xml',
                'application/vnd.google-earth.kml+xml',
                'application/vnd.google-earth.kmz',
                'application/vnd.shp+octet-stream',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/items/${encodeURIComponent(String(featureId))}`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * This operation retreives features from the specified collection
     * GetItems operation
     * @param collectionId Name of a feature collection offered by the service
     * @param f A MIME type indicating the representation of the resources to be presented (e.g. application/gml+xml; version&#x3D;3.2 for GML 3.2).
     * @param limit The optional limit parameter limits the number of items that are presented in the response document.  Only items are counted that are on the first level of the collection in the response document. Nested objects contained within the explicitly requested items shall not be counted.
     * @param bbox Only features that have a geometry that intersects the bounding box are selected. The bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (elevation or depth): * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Lower left corner, coordinate axis 3 (optional) * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2 * Upper right corner, coordinate axis 3 (optional) The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter &#x60;bbox-crs&#x60;. For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge). If a feature has multiple spatial geometry properties, it is the decision of the server whether only a single spatial geometry property is used to determine the extent or all relevant geometries.
     * @param datetime Temporal constraint to be applied to a query; may be a time instance or a temporal period as per ISO8601.
     * @param tRelation Temporal operator to use for temporal contstraint
     * @param resultType The possible values for this parameter are \&quot;results\&quot; and \&quot;hits\&quot;. If the value of the resultType parameter is set to \&quot;results\&quot; the server shall generate a complete response document containing resources that satisfy the operation. The root element of the response container shall include a count of the number of resources actually presented in the response document. The root element of the response container shall also include a count of the total number of resources that the operations actually found which will always be equal to or greater than the number of resource presented in the response document. If the value of the resultType attribute is set to \&quot;hits\&quot; the server shall generate an empty response document containing no resource instances and the root element of the response container shall contain the count of the total number of resources that the operation found. The value for the number of resources presented in the response document shall be set to zero.
     * @param propertyName A list of feature properties to include in the response.  For some output formats, such as XML that can be validate against a formal schema, this list represents the optional properties to include in the response.
     * @param coordPrecision Number of digits after the decimal point to use when presenting result in a text-base output format such as XML or JSON
     * @param css A reference to a CSS to be applied to HTML-based output formats; ignored otherwise
     * @param xslt A reference to a XSLT to be applied to XML-based output formats; ignored otherwise
     * @param kmlStyleURL A reference to a KML style shere to be applied to KML-based output formats; ignored otherwise
     * @param maxBytes The maximum number of bytes to be presented in one page of a query response.
     * @param resolution Specifies the resolution of a display port in the event that the WFS output is intended for display; the server attempts to simplify each output geometry by removing unnecessary verticies and this triming the size of the response.
     * @param responseHandler Tiggers asynchronous processing of the request; notification is sent to the endpoint specified as the value of the parameter.
     * @param crs Asserts the CRS to use for encoding features in the response document.
     * @param filter A query filter specified is some predicate encoding language supported by the server
     * @param filterLanguage An identifier indicating the predicate language used to express the value of the \&quot;filter\&quot; parameter
     * @param q A space seperated list of search terms to be applied to text fields in a feature.
     * @param geometry The geometry of an area of interest specified using WKT.
     * @param geometryCrs The CRS used to encode the coordinates of the \&quot;geometry\&quot; parameter.
     * @param relation The spatial operator to apply when testing a feature\&#39;s geometry against the area of interest encoded using the \&quot;geometry\&quot; parameter.
     * @param lat The latitude of the center point of a proximity search.
     * @param lon The longitude of the center point of a proximity search.
     * @param radius The search radius in meters of a proximity search.
     * @param pretty Whether or not the output should be pretty-formatted (with whitespace, etc.).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFeatures(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', f?: 'application/gml+xml' | 'GML' | 'application/x-bxfs+xml; version=1.0.0' | 'application/x-bxfs+xml; version=0.0.3' | 'text/xml; subtype=bxfs/0.0.3' | 'text/xml; subtype=bxfs/1.0.0' | 'GML0' | 'BXFS' | 'GML.1' | 'GML1' | 'application/gml+xml; version=2.1' | 'application/gml+xml; version=2.1.2' | 'text/xml; subtype=gml/2.1' | 'text/xml; subtype=gml/2.1.2' | 'GML2' | 'application/gml+xml; version=3.1' | 'application/gml+xml; version=3.1.1' | 'text/xml; subtype=gml/3.1' | 'text/xml; subtype=gml/3.1.1' | 'GML3' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1.1; profile=gmlsf0' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1; profile=gmlsf0' | 'GML3L0' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1.1; profile=gmlsf1' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1; profile=gmlsf1' | 'GML3L1' | 'application/gml+xml; version=3.2' | 'text/xml; subtype=gml/3.2' | 'GML32' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.2; profile=gmlsf0' | 'GML32L0' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.2; profile=gmlsf1' | 'GML32L1' | 'application/rss+xml' | 'RSS' | 'application/atom+xml' | 'ATOM' | 'application/vnd.google-earth.kml+xml' | 'KML' | 'application/vnd.google-earth.kmz' | 'KMZ' | 'text/html' | 'HTML' | 'HTMLTAB' | 'HTMLETAB' | 'HTMLDIV' | 'HTMLEDIV' | 'application/geo+json' | 'geojson' | 'application/json' | 'application/vnd.geo+json' | 'application/vnd.ogc.fg+json' | 'jsonfg' | 'application/fg+json' | 'application/vnd.shp+octet-stream' | 'SHAPE' | 'text/json' | 'json' | 'text/xml' | 'XML', limit?: number, bbox?: Array<number>, datetime?: string, tRelation?: 'TEquals' | 'AnyInteracts' | 'After' | 'Before' | 'Begins' | 'BegunBy' | 'TContains' | 'During' | 'EndedBy' | 'Ends' | 'Meets' | 'MetBy' | 'TOverlaps' | 'OverlappedBy', resultType?: 'hits' | 'results', propertyName?: string, coordPrecision?: number, css?: string, xslt?: string, kmlStyleURL?: string, maxBytes?: number, resolution?: number, responseHandler?: string, crs?: string, filter?: string, filterLanguage?: string, q?: string, geometry?: string, geometryCrs?: string, relation?: 'Interests' | 'Equals' | 'Disjoint' | 'Touches' | 'Within' | 'Overlaps' | 'Crosses' | 'Contains', lat?: number, lon?: number, radius?: number, pretty?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml' | 'text/html' | 'application/json' | 'application/geo+json' | 'application/gml+xml' | 'application/x-bxfs+xml' | 'application/rss+xml' | 'application/atom+xml' | 'application/vnd.google-earth.kml+xml' | 'application/vnd.google-earth.kmz' | 'application/vnd.shp+octet-stream' | 'application/problem+json'}): Observable<string>;
    public getFeatures(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', f?: 'application/gml+xml' | 'GML' | 'application/x-bxfs+xml; version=1.0.0' | 'application/x-bxfs+xml; version=0.0.3' | 'text/xml; subtype=bxfs/0.0.3' | 'text/xml; subtype=bxfs/1.0.0' | 'GML0' | 'BXFS' | 'GML.1' | 'GML1' | 'application/gml+xml; version=2.1' | 'application/gml+xml; version=2.1.2' | 'text/xml; subtype=gml/2.1' | 'text/xml; subtype=gml/2.1.2' | 'GML2' | 'application/gml+xml; version=3.1' | 'application/gml+xml; version=3.1.1' | 'text/xml; subtype=gml/3.1' | 'text/xml; subtype=gml/3.1.1' | 'GML3' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1.1; profile=gmlsf0' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1; profile=gmlsf0' | 'GML3L0' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1.1; profile=gmlsf1' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1; profile=gmlsf1' | 'GML3L1' | 'application/gml+xml; version=3.2' | 'text/xml; subtype=gml/3.2' | 'GML32' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.2; profile=gmlsf0' | 'GML32L0' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.2; profile=gmlsf1' | 'GML32L1' | 'application/rss+xml' | 'RSS' | 'application/atom+xml' | 'ATOM' | 'application/vnd.google-earth.kml+xml' | 'KML' | 'application/vnd.google-earth.kmz' | 'KMZ' | 'text/html' | 'HTML' | 'HTMLTAB' | 'HTMLETAB' | 'HTMLDIV' | 'HTMLEDIV' | 'application/geo+json' | 'geojson' | 'application/json' | 'application/vnd.geo+json' | 'application/vnd.ogc.fg+json' | 'jsonfg' | 'application/fg+json' | 'application/vnd.shp+octet-stream' | 'SHAPE' | 'text/json' | 'json' | 'text/xml' | 'XML', limit?: number, bbox?: Array<number>, datetime?: string, tRelation?: 'TEquals' | 'AnyInteracts' | 'After' | 'Before' | 'Begins' | 'BegunBy' | 'TContains' | 'During' | 'EndedBy' | 'Ends' | 'Meets' | 'MetBy' | 'TOverlaps' | 'OverlappedBy', resultType?: 'hits' | 'results', propertyName?: string, coordPrecision?: number, css?: string, xslt?: string, kmlStyleURL?: string, maxBytes?: number, resolution?: number, responseHandler?: string, crs?: string, filter?: string, filterLanguage?: string, q?: string, geometry?: string, geometryCrs?: string, relation?: 'Interests' | 'Equals' | 'Disjoint' | 'Touches' | 'Within' | 'Overlaps' | 'Crosses' | 'Contains', lat?: number, lon?: number, radius?: number, pretty?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml' | 'text/html' | 'application/json' | 'application/geo+json' | 'application/gml+xml' | 'application/x-bxfs+xml' | 'application/rss+xml' | 'application/atom+xml' | 'application/vnd.google-earth.kml+xml' | 'application/vnd.google-earth.kmz' | 'application/vnd.shp+octet-stream' | 'application/problem+json'}): Observable<HttpResponse<string>>;
    public getFeatures(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', f?: 'application/gml+xml' | 'GML' | 'application/x-bxfs+xml; version=1.0.0' | 'application/x-bxfs+xml; version=0.0.3' | 'text/xml; subtype=bxfs/0.0.3' | 'text/xml; subtype=bxfs/1.0.0' | 'GML0' | 'BXFS' | 'GML.1' | 'GML1' | 'application/gml+xml; version=2.1' | 'application/gml+xml; version=2.1.2' | 'text/xml; subtype=gml/2.1' | 'text/xml; subtype=gml/2.1.2' | 'GML2' | 'application/gml+xml; version=3.1' | 'application/gml+xml; version=3.1.1' | 'text/xml; subtype=gml/3.1' | 'text/xml; subtype=gml/3.1.1' | 'GML3' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1.1; profile=gmlsf0' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1; profile=gmlsf0' | 'GML3L0' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1.1; profile=gmlsf1' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1; profile=gmlsf1' | 'GML3L1' | 'application/gml+xml; version=3.2' | 'text/xml; subtype=gml/3.2' | 'GML32' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.2; profile=gmlsf0' | 'GML32L0' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.2; profile=gmlsf1' | 'GML32L1' | 'application/rss+xml' | 'RSS' | 'application/atom+xml' | 'ATOM' | 'application/vnd.google-earth.kml+xml' | 'KML' | 'application/vnd.google-earth.kmz' | 'KMZ' | 'text/html' | 'HTML' | 'HTMLTAB' | 'HTMLETAB' | 'HTMLDIV' | 'HTMLEDIV' | 'application/geo+json' | 'geojson' | 'application/json' | 'application/vnd.geo+json' | 'application/vnd.ogc.fg+json' | 'jsonfg' | 'application/fg+json' | 'application/vnd.shp+octet-stream' | 'SHAPE' | 'text/json' | 'json' | 'text/xml' | 'XML', limit?: number, bbox?: Array<number>, datetime?: string, tRelation?: 'TEquals' | 'AnyInteracts' | 'After' | 'Before' | 'Begins' | 'BegunBy' | 'TContains' | 'During' | 'EndedBy' | 'Ends' | 'Meets' | 'MetBy' | 'TOverlaps' | 'OverlappedBy', resultType?: 'hits' | 'results', propertyName?: string, coordPrecision?: number, css?: string, xslt?: string, kmlStyleURL?: string, maxBytes?: number, resolution?: number, responseHandler?: string, crs?: string, filter?: string, filterLanguage?: string, q?: string, geometry?: string, geometryCrs?: string, relation?: 'Interests' | 'Equals' | 'Disjoint' | 'Touches' | 'Within' | 'Overlaps' | 'Crosses' | 'Contains', lat?: number, lon?: number, radius?: number, pretty?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/xml' | 'text/html' | 'application/json' | 'application/geo+json' | 'application/gml+xml' | 'application/x-bxfs+xml' | 'application/rss+xml' | 'application/atom+xml' | 'application/vnd.google-earth.kml+xml' | 'application/vnd.google-earth.kmz' | 'application/vnd.shp+octet-stream' | 'application/problem+json'}): Observable<HttpEvent<string>>;
    public getFeatures(collectionId: 'AgricultureSrf' | 'CulturePnt' | 'CultureSrf' | 'FacilityPnt' | 'HydrographyCrv' | 'HydrographySrf' | 'MilitarySrf' | 'SettlementSrf' | 'StructurePnt' | 'TransportationGroundCrv' | 'UtilityInfrastructureCrv' | 'UtilityInfrastructurePnt' | 'VegetationSrf', f?: 'application/gml+xml' | 'GML' | 'application/x-bxfs+xml; version=1.0.0' | 'application/x-bxfs+xml; version=0.0.3' | 'text/xml; subtype=bxfs/0.0.3' | 'text/xml; subtype=bxfs/1.0.0' | 'GML0' | 'BXFS' | 'GML.1' | 'GML1' | 'application/gml+xml; version=2.1' | 'application/gml+xml; version=2.1.2' | 'text/xml; subtype=gml/2.1' | 'text/xml; subtype=gml/2.1.2' | 'GML2' | 'application/gml+xml; version=3.1' | 'application/gml+xml; version=3.1.1' | 'text/xml; subtype=gml/3.1' | 'text/xml; subtype=gml/3.1.1' | 'GML3' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1.1; profile=gmlsf0' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.1; profile=gmlsf0' | 'GML3L0' | 'text/xml; subType=gml/3.1.1/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.1.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1.1; profile=gmlsf1' | 'application/gml+xml; version=3.1; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.1; profile=gmlsf1' | 'GML3L1' | 'application/gml+xml; version=3.2' | 'text/xml; subtype=gml/3.2' | 'GML32' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/0' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf0' | 'application/gml+xml; version=3.2; profile=gmlsf0' | 'GML32L0' | 'text/xml; subType=gml/3.2/profiles/gmlsf/1.0.0/1' | 'application/gml+xml; version=3.2; profile=http://www.opengis.net/def/profile/ogc/2.0/gml-sf1' | 'application/gml+xml; version=3.2; profile=gmlsf1' | 'GML32L1' | 'application/rss+xml' | 'RSS' | 'application/atom+xml' | 'ATOM' | 'application/vnd.google-earth.kml+xml' | 'KML' | 'application/vnd.google-earth.kmz' | 'KMZ' | 'text/html' | 'HTML' | 'HTMLTAB' | 'HTMLETAB' | 'HTMLDIV' | 'HTMLEDIV' | 'application/geo+json' | 'geojson' | 'application/json' | 'application/vnd.geo+json' | 'application/vnd.ogc.fg+json' | 'jsonfg' | 'application/fg+json' | 'application/vnd.shp+octet-stream' | 'SHAPE' | 'text/json' | 'json' | 'text/xml' | 'XML', limit?: number, bbox?: Array<number>, datetime?: string, tRelation?: 'TEquals' | 'AnyInteracts' | 'After' | 'Before' | 'Begins' | 'BegunBy' | 'TContains' | 'During' | 'EndedBy' | 'Ends' | 'Meets' | 'MetBy' | 'TOverlaps' | 'OverlappedBy', resultType?: 'hits' | 'results', propertyName?: string, coordPrecision?: number, css?: string, xslt?: string, kmlStyleURL?: string, maxBytes?: number, resolution?: number, responseHandler?: string, crs?: string, filter?: string, filterLanguage?: string, q?: string, geometry?: string, geometryCrs?: string, relation?: 'Interests' | 'Equals' | 'Disjoint' | 'Touches' | 'Within' | 'Overlaps' | 'Crosses' | 'Contains', lat?: number, lon?: number, radius?: number, pretty?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/xml' | 'text/html' | 'application/json' | 'application/geo+json' | 'application/gml+xml' | 'application/x-bxfs+xml' | 'application/rss+xml' | 'application/atom+xml' | 'application/vnd.google-earth.kml+xml' | 'application/vnd.google-earth.kmz' | 'application/vnd.shp+octet-stream' | 'application/problem+json'}): Observable<any> {
        if (collectionId === null || collectionId === undefined) {
            throw new Error('Required parameter collectionId was null or undefined when calling getFeatures.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (f !== undefined && f !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>f, 'f');
        }
        if (limit !== undefined && limit !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>limit, 'limit');
        }
        if (bbox) {
            queryParameters = this.addToHttpParams(queryParameters,
                bbox.join(COLLECTION_FORMATS['csv']), 'bbox');
        }
        if (datetime !== undefined && datetime !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>datetime, 'datetime');
        }
        if (tRelation !== undefined && tRelation !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>tRelation, 'tRelation');
        }
        if (resultType !== undefined && resultType !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>resultType, 'resultType');
        }
        if (propertyName !== undefined && propertyName !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>propertyName, 'propertyName');
        }
        if (coordPrecision !== undefined && coordPrecision !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>coordPrecision, 'coordPrecision');
        }
        if (css !== undefined && css !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>css, 'css');
        }
        if (xslt !== undefined && xslt !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>xslt, 'xslt');
        }
        if (kmlStyleURL !== undefined && kmlStyleURL !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>kmlStyleURL, 'kmlStyleURL');
        }
        if (maxBytes !== undefined && maxBytes !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>maxBytes, 'maxBytes');
        }
        if (resolution !== undefined && resolution !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>resolution, 'resolution');
        }
        if (responseHandler !== undefined && responseHandler !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>responseHandler, 'responseHandler');
        }
        if (crs !== undefined && crs !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>crs, 'crs');
        }
        if (filter !== undefined && filter !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>filter, 'filter');
        }
        if (filterLanguage !== undefined && filterLanguage !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>filterLanguage, 'filter_language');
        }
        if (q !== undefined && q !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>q, 'q');
        }
        if (geometry !== undefined && geometry !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>geometry, 'geometry');
        }
        if (geometryCrs !== undefined && geometryCrs !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>geometryCrs, 'geometry_crs');
        }
        if (relation !== undefined && relation !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>relation, 'relation');
        }
        if (lat !== undefined && lat !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>lat, 'lat');
        }
        if (lon !== undefined && lon !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>lon, 'lon');
        }
        if (radius !== undefined && radius !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>radius, 'radius');
        }
        if (pretty !== undefined && pretty !== null) {
          queryParameters = this.addToHttpParams(queryParameters,
            <any>pretty, 'pretty');
        }

        let headers = this.defaultHeaders;

        let credential: string | undefined;
        // authentication (cwApiKeyHeader) required
        credential = this.configuration.lookupCredential('cwApiKeyHeader');
        if (credential) {
            headers = headers.set('CubeWerx-API-Key', credential);
        }

        // authentication (cwApiKeyQuery) required
        credential = this.configuration.lookupCredential('cwApiKeyQuery');
        if (credential) {
            queryParameters = queryParameters.set('apiKey', credential);
        }

        // authentication (cwAuth) required
        credential = this.configuration.lookupCredential('cwAuth');
        if (credential) {
        }

        // authentication (httpBearer) required
        credential = this.configuration.lookupCredential('httpBearer');
        if (credential) {
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        // authentication (oauth2) required
        credential = this.configuration.lookupCredential('oauth2');
        if (credential) {
            headers = headers.set('Authorization', 'Bearer ' + credential);
        }

        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/xml',
                'text/html',
                'application/json',
                'application/geo+json',
                'application/gml+xml',
                'application/x-bxfs+xml',
                'application/rss+xml',
                'application/atom+xml',
                'application/vnd.google-earth.kml+xml',
                'application/vnd.google-earth.kmz',
                'application/vnd.shp+octet-stream',
                'application/problem+json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        let responseType: 'text' | 'json' = 'json';
        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }

        return this.httpClient.get<string>(`${this.configuration.basePath}/collections/${encodeURIComponent(String(collectionId))}/items`,
            {
                params: queryParameters,
                responseType: <any>responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
